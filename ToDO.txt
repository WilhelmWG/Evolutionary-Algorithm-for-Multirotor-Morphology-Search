ToDo:
IMU State Estimation: Currently estimating rotation relative to world frame, but not position or velocity.
Higher order RK-method (Make simulate_timestep return the derivatives of all values instead of actually changing them, still need some method for updating the values idk)
Real trajectoryPlanning with dep_cams
Add more tests for if a MR is really controllable (saves time)
Why 4th order no workie?

Make lineage???????
#Basically need to backtrace the final best solution to see how it evolved.
#But i do not know which parent will father the final best solution.
#For every set of parents, add the parent to the list of parents with the end parent being the one that is closest to you.
#see rxy
parents_history = [] # one entry per generation
on_parents(parents):
    for parent in parents:

Morphologies:
- no random b1d (done)
- random b1d (done)
- less elitism (done)
- keep parents (done)
- Rank selection no random b1d
- Rank selection random b1d
- Crossover 
- high mutation rate (done)
- less valuable battery




Done:
on_generation(generation):
    print(generation)
random init
make error from reference not desired
make b1_d random toggleable
Make more optimal controller for fully actuated MAV:
- calculate rxy^2 from control allocation matrix
- Calculate optimal b3_d from b3_r and b3' using bisection
Make test for whether a fully actuated dynamics is truly well suited for fully actuated control
ADD THE MISMATCH IN ORIENTATION TO THE FITNESS FUNCTION 
ADD BATTERY SOURCSE TO BIBTEX
Add more tests for if a MR is really controllable (saves time) (v)
Parallelize computing (v)
Make the S'es correspond between motor and battery (v)
Visualize MR design (v)
Get GA going (v)
Depth-Camera (v)
Add control gains to genotype (v)
Controller
- Calculate errors (v)
- Calculate force and moment (v)
- Calculate control allocation matrix and allocate forces to rotors (v)
- Figure out if reversed b3 axis makes a difference (v)
- Positive sigma + positive rps = positive force (v)
- F IS OPPOSITE FROM PAPER BUT b3d DEFINED THE SAME AND I THINK I*VE ROTATED THE MATRIX CORRECTLY; SO THIS IS WEIRD (v)
FITNESS WITH BATTERY TIME > FITNESS WITH POWER CONSUMPTION because power will result in the smallest possible MAVs
Finish quad.get_depth_frame(obst) (v)


