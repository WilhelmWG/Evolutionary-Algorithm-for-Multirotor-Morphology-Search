ToDo:
IMU State Estimation: Currently estimating rotation relative to world frame, but not position or velocity.
Higher order RK-method (Make simulate_timestep return the derivatives of all values instead of actually changing them, still need some method for updating the values idk)
Real trajectoryPlanning with dep_cams
Add more tests for if a MR is really controllable (saves time)
Make test for whether a fully actuated dynamics is truly well suited for fully actuated control
Ensure valid init (batt mot prop)
Why 4th order no workie?
ADD BATTERY SOURCSE TO BIBTEX
ADD THE MISMATCH IN ORIENTATION TO THE FITNESS FUNCTION 

Make more optimal controller for fully actuated MAV:
- calculate rxy^2 from control allocation matrix
- Calculate optimal b3_d from b3_r and b3' using bisection


Done:
Add more tests for if a MR is really controllable (saves time) (v)
Parallelize computing (v)
Make the S'es correspond between motor and battery (v)
Visualize MR design (v)
Get GA going (v)
Depth-Camera (v)
Add control gains to genotype (v)
Controller
- Calculate errors (v)
- Calculate force and moment (v)
- Calculate control allocation matrix and allocate forces to rotors (v)
- Figure out if reversed b3 axis makes a difference (v)
- Positive sigma + positive rps = positive force (v)
- F IS OPPOSITE FROM PAPER BUT b3d DEFINED THE SAME AND I THINK I*VE ROTATED THE MATRIX CORRECTLY; SO THIS IS WEIRD (v)
FITNESS WITH BATTERY TIME > FITNESS WITH POWER CONSUMPTION because power will result in the smallest possible MAVs
Finish quad.get_depth_frame(obst) (v)
torque from gravity (Not necessary as long as multirotor is symmetrical about center of mass) (v)


